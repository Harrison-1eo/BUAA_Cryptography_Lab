from RSAutils import quick_mutli as pow, inverse, n2s
import itertools
from gmpy2 import next_prime

X = [
    47180927558712348301357323298579857462499804038875063584552378483830210532230,
    9603270620098373026778074619734093489439894141686611064119437904761770402849,
    64687949988901827316628691896308282162799978507736447555870415992858878570447,
    58311616293708903730202132632967766135369777612514680296878471201989876868396,
    58786678315456830789332206869090855761874342400689715502723934307929185245182,
    6040038836374754101107905787786457290778692310459398204048051227531753400894,
    8977188208027959344060588993406875692691152787322480889022394846122922448361,
    49528531259784827335796406207762867329623772108571012574261760325594940372990,
    7326608894485268791833156008248692762974736464643854532868184650624295599280,
    14622897263039829870882410200589050585741404677613057925782837094472842413247,
    66693334510197350438724020245830989630487390576930286975114703443594257089301
    ]

RES = []

PRIME = []

p = 74318463376311964657848870236469351222861371046000989980725143814597652972079
g = 10135979321704650132001133858909900216529170765388975908180263641843583056994

N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963

for X_ in X:
    x = X_
    res = 0
    for i in range(256):
        x = pow(g, x, p)
        if x < (p-1) // 2:
            res -= (1 << i) - 1
        elif x > (p-1) // 2:
            res += (1 << i) + 1
        else:
            res ^= (1 << i + 1)
    res = res if res > 0 else -res
    if res not in RES:            
        RES.append(res)

print("RES:")
for i in RES:
    print(i)
        
pob_comb = list(itertools.combinations(RES, 2))

# p, q = 0, 0

for i in pob_comb:
    u, v = i[0], i[1]
    u, v = next_prime(u**2 + v**2), next_prime(2*u*v)
    PRIME.append((u, v))
    # if u * v == N:
    #     print("PRIME:", u, v, sep="\n")
    #     p, q = u, v
    #     break


for (p, q) in PRIME:
    p = int(p)
    q = int(q)
    N = p * q
    phi = (p-1) * (q-1)
    e = 65537
    d = inverse(e, phi)
    c = 23334367507777982721463578689282517343702422017568936413397591619899938216343800551132594869485665306596562901129144338015710969994575939792628945297846703002122172051500112438041566171992504143239954624689779597268840813422509867439815100802585538453946245512563984478922752113443379737653491922857109660034
    try:
        m = str(n2s(pow(c, d, N)), encoding = "utf-8")
        print(m)
        if m.startswith("flag"):
            print(m)
    except:
        pass

# print("flag{U_g&5-th3_BA51cs_MY_PaDawan>_<}")